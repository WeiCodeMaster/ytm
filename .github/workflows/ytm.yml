name: YTMonster Login and Launch Client Workflow

on:
  schedule:
    - cron: '0 */1 * * *'  # Runs every hour (adjust as needed)
  workflow_dispatch:

jobs:
  login-job:
    runs-on: ubuntu-latest

    env:
      YTMONSTER_USERNAME: ${{ secrets.YTMONSTER_USERNAME }}
      YTMONSTER_PASSWORD: ${{ secrets.YTMONSTER_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          echo "Initializing npm project..."
          npm init -y
          echo "Installing puppeteer-real-browser..."
          npm install puppeteer-real-browser

      - name: System information
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "System info: $(uname -a)"
          echo "Available memory: $(free -h)"
          echo "Available disk space: $(df -h)"
          echo "Network connection: $(curl -s https://www.google.com > /dev/null && echo 'Connected' || echo 'Disconnected')"

      - name: Create script and screenshots directories
        run: |
          mkdir -p scripts
          mkdir -p screenshots

      - name: Create YTMonster Login and Launch Script
        run: |
          echo "Generating login and launch client script..."
          cat > scripts/ytmonster-login.js << 'EOL'
          const { connect } = require('puppeteer-real-browser');
          const fs = require('fs');
          const path = require('path');

          (async () => {
            // Define the screenshots directory relative to repository root.
            const screenshotsDir = path.join(__dirname, '../screenshots');
            if (!fs.existsSync(screenshotsDir)) {
              fs.mkdirSync(screenshotsDir, { recursive: true });
            }

            // Retrieve credentials from environment variables.
            const username = process.env.YTMONSTER_USERNAME;
            const password = process.env.YTMONSTER_PASSWORD;
            if (!username || !password) {
              console.error("Missing credentials! Ensure YTMONSTER_USERNAME and YTMONSTER_PASSWORD are set.");
              process.exit(1);
            }

            // Connect to a real browser instance using puppeteer-real-browser.
            // '--disable-popup-blocking' ensures pop-ups are not blocked.
            const { browser, page } = await connect({
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--window-size=1280,800',
                '--disable-popup-blocking'
              ],
              customConfig: {
                defaultViewport: { width: 1280, height: 800 }
              },
              turnstile: true, // Enables Cloudflare challenge solving if needed.
            });

            try {
              // Step 1: Navigate to the login page.
              console.log("Navigating to https://www.ytmonster.net/exchange/views ...");
              await page.goto("https://www.ytmonster.net/exchange/views", { waitUntil: "domcontentloaded", timeout: 60000 });
              await page.screenshot({ path: path.join(screenshotsDir, "step1_navigate.png"), fullPage: true });

              // Step 2: Wait for the login form to load.
              console.log("Waiting for login form elements...");
              await page.waitForSelector('#inputUsername', { visible: true, timeout: 30000 });
              await page.waitForSelector('#inputPassword', { visible: true, timeout: 30000 });
              await page.screenshot({ path: path.join(screenshotsDir, "step2_login_form_loaded.png"), fullPage: true });

              // Step 3: Fill in the credentials.
              console.log("Filling in credentials...");
              await page.type('#inputUsername', username, { delay: 100 });
              await page.type('#inputPassword', password, { delay: 100 });
              await page.screenshot({ path: path.join(screenshotsDir, "step3_credentials_filled.png"), fullPage: true });

              // Step 4: Click the Login button.
              console.log("Submitting the login form...");
              await page.waitForSelector("button[type='submit']", { visible: true, timeout: 30000 });
              await page.click("button[type='submit']");
              await page.screenshot({ path: path.join(screenshotsDir, "step4_after_submit_click.png"), fullPage: true });

              // Step 5: Wait for login success.
              console.log("Waiting for login success...");
              try {
                await page.waitForNavigation({ waitUntil: "domcontentloaded", timeout: 30000 });
              } catch (navError) {
                console.warn("Navigation did not occur; checking for login form disappearance.");
              }
              // If login succeeded, the form is gone.
              await page.waitForFunction(() => !document.querySelector("#formLogin"), { timeout: 30000 });
              await page.screenshot({ path: path.join(screenshotsDir, "step5_logged_in.png"), fullPage: true });
              console.log("Login successful.");

              // Step 6: Launch the client by clicking the 'Launch Client' button.
              console.log("Clicking the Launch Client button...");
              await page.waitForSelector("a.open-client", { visible: true, timeout: 30000 });
              
              // Listen for the new window (client page) to open.
              const newPagePromise = new Promise(resolve => {
                browser.once('targetcreated', async target => {
                  if (target.type() === 'page') {
                    console.log("New target of type 'page' detected. Retrieving client page...");
                    const newPage = await target.page();
                    console.log("Client page successfully retrieved.");
                    resolve(newPage);
                  }
                });
              });
              
              // Click the button to open the client.
              await page.click("a.open-client");
              console.log("Launch Client button clicked. Waiting for client page to open...");

              // Get the new client page.
              const clientPage = await newPagePromise;
              console.log("Client page opened.");

              // Attempt a brief wait for navigation (5-second timeout).
              console.log("Checking for navigation event on the client page for 5 seconds...");
              try {
                await clientPage.waitForNavigation({ waitUntil: "domcontentloaded", timeout: 5000 });
                console.log("Navigation event detected on the client page.");
              } catch (e) {
                console.warn("No navigation event detected on the client page. Proceeding with a 5-second delay.");
              }
              
              console.log("Starting a fixed 5-second delay before proceeding...");
              await new Promise(resolve => setTimeout(resolve, 5000));
              console.log("Delay completed.");
              
              // Capture a screenshot of the client page.
              await clientPage.screenshot({ path: path.join(screenshotsDir, "step6_client_opened.png"), fullPage: true });
              console.log("Client page screenshot captured successfully.");

              // Step 7: Unmaximize the client window and click the Start button.
              // (If the site specifically requires the window not to be fullscreen, let's do so now.)
              console.log("Unmaximizing client window...");
              await clientPage.setViewport({ width: 800, height: 600 });
              await clientPage.screenshot({ path: path.join(screenshotsDir, "step7_unmaximized.png"), fullPage: true });
              console.log("Client window unmaximized.");

              console.log("Waiting for the Start button to become visible...");
              await clientPage.waitForSelector('#startBtn', { visible: true, timeout: 30000 });
              console.log("Clicking the Start button...");
              await clientPage.click('#startBtn');
              await clientPage.screenshot({ path: path.join(screenshotsDir, "step7_after_start_click.png"), fullPage: true });
              console.log("Start button clicked.");

              // Step 8: Check if a new window pops up, then wait 30 seconds.
              console.log("Waiting to see if a new window opens after Start...");
              const newWindowPromise = new Promise((resolve, reject) => {
                let newWindowDetected = false;
                const checkTime = Date.now();
                const maxCheckInterval = 5000; // 5 seconds

                // Listen for any new targets in that short window
                const listener = async (target) => {
                  if (target.type() === 'page') {
                    console.log("New window opened after Start. Taking a screenshot...");
                    newWindowDetected = true;
                    browser.removeListener('targetcreated', listener);

                    const popupPage = await target.page();
                    await popupPage.screenshot({ path: path.join(screenshotsDir, "step8_new_window_after_start.png"), fullPage: true });
                    resolve();
                  }
                };
                browser.on('targetcreated', listener);

                // After 5s, if no new window detected, resolve anyway.
                const waitInterval = setInterval(() => {
                  if (Date.now() - checkTime >= maxCheckInterval) {
                    clearInterval(waitInterval);
                    browser.removeListener('targetcreated', listener);
                    if (!newWindowDetected) {
                      console.log("No new window was detected within 5 seconds of starting.");
                    }
                    resolve();
                  }
                }, 500);
              });

              await newWindowPromise;

              // Regardless of window detection, do a final 30-second wait to let the Start process run.
              console.log("Waiting 30 seconds after Start for any progress or changes...");
              await new Promise(resolve => setTimeout(resolve, 30000));
              await clientPage.screenshot({ path: path.join(screenshotsDir, "step8_after_30secs.png"), fullPage: true });
              console.log("30-second wait completed. Final screenshot captured.");

            } catch (error) {
              console.error("An error occurred during the process:", error.message);
              // Attempt a final screenshot on error.
              try {
                await page.screenshot({ path: path.join(screenshotsDir, "error.png"), fullPage: true });
              } catch (_) {
                // If page is no longer available, ignore
              }
              process.exit(1);
            } finally {
              await browser.close();
            }
          })();
          EOL

      - name: Run YTMonster Login and Launch Script
        run: |
          echo "Running YTMonster login and launch client script..."
          node scripts/ytmonster-login.js | tee script_output.log

      - name: Upload Debug Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ytmonster-debug-artifacts
          path: |
            screenshots/
            script_output.log
