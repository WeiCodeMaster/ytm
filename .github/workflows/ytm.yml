name: YTMonster Login and Launch Client Workflow

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:

jobs:
  login-job:
    runs-on: ubuntu-latest

    env:
      YTMONSTER_USERNAME: ${{ secrets.YTMONSTER_USERNAME }}
      YTMONSTER_PASSWORD: ${{ secrets.YTMONSTER_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          echo "Initializing npm project..."
          npm init -y
          echo "Installing puppeteer-real-browser..."
          npm install puppeteer-real-browser

      - name: System information
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "System info: $(uname -a)"
          echo "Available memory: $(free -h)"
          echo "Available disk space: $(df -h)"
          echo "Network connection: $(curl -s https://www.google.com > /dev/null && echo 'Connected' || echo 'Disconnected')"

      - name: Create script and screenshots directories
        run: |
          mkdir -p scripts
          mkdir -p screenshots

      - name: Create YTMonster Login and Launch Script
        run: |
          echo "Generating login and launch client script..."
          # --- (The Node.js script content remains the same as in your original request) ---
          # --- (Make sure the entire 'cat > scripts/ytmonster-login.js << EOL ... EOL' block is here) ---
          cat > scripts/ytmonster-login.js << 'EOL'
          const { connect } = require('puppeteer-real-browser');
          const fs = require('fs');
          const path = require('path');

          (async () => {
            // Define the screenshots directory relative to repository root.
            const screenshotsDir = path.join(__dirname, '../screenshots');
            if (!fs.existsSync(screenshotsDir)) {
              fs.mkdirSync(screenshotsDir, { recursive: true });
            }

            // Retrieve credentials from environment variables.
            const username = process.env.YTMONSTER_USERNAME;
            const password = process.env.YTMONSTER_PASSWORD;
            if (!username || !password) {
              console.error("Missing credentials! Ensure YTMONSTER_USERNAME and YTMONSTER_PASSWORD are set.");
              process.exit(1);
            }

            // Connect to a real browser instance with the necessary flags.
            const { browser, page } = await connect({
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--window-size=1280,800',
                '--disable-popup-blocking'
              ],
              customConfig: {
                defaultViewport: { width: 1280, height: 800 }
              },
              turnstile: true,
            });

            try {
              // STEP 1: Navigate to the login page.
              console.log("Navigating to https://www.ytmonster.net/exchange/views ...");
              await page.goto("https://www.ytmonster.net/exchange/views", { waitUntil: "domcontentloaded", timeout: 60000 });
              await page.screenshot({ path: path.join(screenshotsDir, "step1_navigate.png"), fullPage: true });

              // STEP 2: Wait for login form.
              console.log("Waiting for login form elements...");
              await page.waitForSelector('#inputUsername', { visible: true, timeout: 30000 });
              await page.waitForSelector('#inputPassword', { visible: true, timeout: 30000 });
              await page.screenshot({ path: path.join(screenshotsDir, "step2_login_form_loaded.png"), fullPage: true });

              // STEP 3: Fill in credentials.
              console.log("Filling in credentials...");
              await page.type('#inputUsername', username, { delay: 100 });
              await page.type('#inputPassword', password, { delay: 100 });
              await page.screenshot({ path: path.join(screenshotsDir, "step3_credentials_filled.png"), fullPage: true });

              // STEP 4: Click the login button.
              console.log("Submitting the login form...");
              await page.waitForSelector("button[type='submit']", { visible: true, timeout: 30000 });
              await page.click("button[type='submit']");
              await page.screenshot({ path: path.join(screenshotsDir, "step4_after_submit_click.png"), fullPage: true });

              // STEP 5: Wait for login success.
              console.log("Waiting for login success...");
              try {
                await page.waitForNavigation({ waitUntil: "domcontentloaded", timeout: 30000 });
              } catch (navError) {
                console.warn("Navigation did not occur; checking for login form disappearance.");
              }
              await page.waitForFunction(() => !document.querySelector("#formLogin"), { timeout: 30000 });
              await page.screenshot({ path: path.join(screenshotsDir, "step5_logged_in.png"), fullPage: true });
              console.log("Login successful.");

              // NEW STEP: End all sessions.
              console.log("Ending all sessions by clicking 'End All Sessions' button...");
              await page.waitForSelector('#endAll', { visible: true, timeout: 30000 });
              await page.click('#endAll');
              await page.screenshot({ path: path.join(screenshotsDir, "step5_end_all_sessions.png"), fullPage: true });
              console.log("All sessions ended.");

              // LOOP: Launch the client 3 times.
              for (let i = 1; i <= 3; i++) {
                console.log(`Launching client iteration ${i}...`);
                // STEP 6: Launch the client.
                console.log(`Iteration ${i}: Clicking the Launch Client button...`);
                await page.waitForSelector("a.open-client", { visible: true, timeout: 30000 });
                
                const newPagePromise = new Promise(resolve => {
                  browser.once('targetcreated', async target => {
                    if (target.type() === 'page') {
                      console.log(`Iteration ${i}: New target of type 'page' detected. Retrieving client page...`);
                      const newPage = await target.page();
                      console.log(`Iteration ${i}: Client page successfully retrieved.`);
                      resolve(newPage);
                    }
                  });
                });
                await page.click("a.open-client");
                console.log(`Iteration ${i}: Launch Client button clicked. Waiting for client page to open...`);

                const clientPage = await newPagePromise;
                console.log(`Iteration ${i}: Client page opened.`);

                // Attempt a brief wait for navigation (5s).
                console.log(`Iteration ${i}: Checking for navigation event on the client page for 5 seconds...`);
                try {
                  await clientPage.waitForNavigation({ waitUntil: "domcontentloaded", timeout: 5000 });
                  console.log(`Iteration ${i}: Navigation event detected on the client page.`);
                } catch (e) {
                  console.warn(`Iteration ${i}: No navigation event detected on the client page. Proceeding with a 5-second delay.`);
                }
                console.log(`Iteration ${i}: Starting a fixed 5-second delay...`);
                await new Promise(resolve => setTimeout(resolve, 5000));
                console.log(`Iteration ${i}: Delay completed.`);
                await clientPage.screenshot({ path: path.join(screenshotsDir, `step6_client_opened_${i}.png`), fullPage: true });
                console.log(`Iteration ${i}: Client page screenshot captured.`);

                // STEP 7: Unmaximize the client window and click the Start button.
                console.log(`Iteration ${i}: [DEBUG] Attempting to unmaximize the client window...`);
                let dimsBefore = await clientPage.evaluate(() => ({
                  w: window.innerWidth, 
                  h: window.innerHeight
                }));
                console.log(`[DEBUG] Iteration ${i}: Current window.innerWidth=${dimsBefore.w}, window.innerHeight=${dimsBefore.h} (before resizing).`);
                
                console.log(`[DEBUG] Iteration ${i}: Overriding window.screen.availWidth to 1920...`);
                await clientPage.evaluate(() => {
                  Object.defineProperty(window.screen, 'availWidth', {
                    get: () => 1920,
                    configurable: true
                  });
                  window.dispatchEvent(new Event('resize'));
                });
                
                const UNMAX_WIDTH = 800;
                const UNMAX_HEIGHT = 600;
                console.log(`[DEBUG] Iteration ${i}: Setting viewport to ${UNMAX_WIDTH}x${UNMAX_HEIGHT}...`);
                await clientPage.setViewport({ width: UNMAX_WIDTH, height: UNMAX_HEIGHT });
                
                console.log(`[DEBUG] Iteration ${i}: Calling window.resizeTo in page context and dispatching resize event...`);
                await clientPage.evaluate((w, h) => {
                  window.resizeTo(w, h);
                  window.dispatchEvent(new Event('resize'));
                }, UNMAX_WIDTH, UNMAX_HEIGHT);
                
                await new Promise(resolve => setTimeout(resolve, 3000));
                let dimsAfter = await clientPage.evaluate(() => ({
                  w: window.innerWidth, 
                  h: window.innerHeight
                }));
                console.log(`[DEBUG] Iteration ${i}: After resizing, window.innerWidth=${dimsAfter.w}, window.innerHeight=${dimsAfter.h}.`);
                
                const bodyText = await clientPage.evaluate(() => document.body.innerText || "");
                if (bodyText.includes("Please unmaximize the client window")) {
                  console.warn(`[DEBUG] Iteration ${i}: The 'unmaximize window' error text is still present in the page.`);
                  console.warn(`[DEBUG] Iteration ${i}: Error snippet:`, bodyText.substr(bodyText.indexOf("Please unmaximize"), 200));
                  const errorHtml = await clientPage.content();
                  fs.writeFileSync(path.join(screenshotsDir, `step7_unmaximized_error_${i}.html`), errorHtml);
                  console.warn(`[DEBUG] Iteration ${i}: Saved HTML content for unmaximize error to step7_unmaximized_error_${i}.html.`);
                } else {
                  console.log(`[DEBUG] Iteration ${i}: The 'unmaximize window' error text was not found in the document body.`);
                }
                await clientPage.screenshot({ path: path.join(screenshotsDir, `step7_unmaximized_${i}.png`), fullPage: true });
                console.log(`[DEBUG] Iteration ${i}: Screenshot taken after unmaximize attempt.`);

                console.log(`Iteration ${i}: Waiting for the Start button to be visible...`);
                await clientPage.waitForSelector('#startBtn', { visible: true, timeout: 30000 });
                console.log(`Iteration ${i}: Clicking the Start button...`);
                await clientPage.click('#startBtn');
                await clientPage.screenshot({ path: path.join(screenshotsDir, `step7_after_start_click_${i}.png`), fullPage: true });
                console.log(`Iteration ${i}: Start button clicked.`);

                // STEP 8: Check for a new window after Start and wait 60 seconds.
                console.log(`Iteration ${i}: Waiting 15 seconds to see if a new window opens after Start...`);
                const newWindowPromise2 = new Promise(resolve => {
                  let newWindowDetected = false;
                  const checkStart = Date.now();
                  const maxCheckTime = 15000; // check for 15 seconds
                  const listener = async target => {
                    if (target.type() === 'page') {
                      newWindowDetected = true;
                      console.log(`Iteration ${i}: New window opened after Start. Waiting 5 seconds for it to adjust...`);
                      const popupPage = await target.page();
                      await new Promise(resolve => setTimeout(resolve, 5000));
                      const dims = await popupPage.evaluate(() => ({ width: window.innerWidth, height: window.innerHeight }));
                      console.log(`Iteration ${i}: Popup window dimensions:`, dims);
                      if (dims.width === 0) {
                        console.warn(`Iteration ${i}: Popup width is 0. Forcing viewport to 800x600...`);
                        await popupPage.setViewport({ width: 800, height: 600 });
                      }
                      console.log(`Iteration ${i}: Taking screenshot of popup window...`);
                      await popupPage.screenshot({ path: path.join(screenshotsDir, `step8_new_window_after_start_${i}.png`), fullPage: true });
                      if (typeof browser.removeListener === 'function') {
                        browser.removeListener('targetcreated', listener);
                      } else if (typeof browser.off === 'function') {
                        browser.off('targetcreated', listener);
                      }
                      resolve();
                    }
                  };
                  browser.on('targetcreated', listener);
                  const interval = setInterval(() => {
                    if (Date.now() - checkStart >= maxCheckTime) {
                      clearInterval(interval);
                      if (typeof browser.removeListener === 'function') {
                        browser.removeListener('targetcreated', listener);
                      } else if (typeof browser.off === 'function') {
                        browser.off('targetcreated', listener);
                      }
                      if (!newWindowDetected) {
                        console.log(`Iteration ${i}: No new window was detected within 15 seconds after Start.`);
                      }
                      resolve();
                    }
                  }, 500);
                });
                await newWindowPromise2;

                console.log(`Iteration ${i}: Waiting 60 seconds after Start for any progress or changes...`);
                await new Promise(resolve => setTimeout(resolve, 60000));
                await clientPage.screenshot({ path: path.join(screenshotsDir, `step8_after_60secs_${i}.png`), fullPage: true });
                console.log(`Iteration ${i}: 60-second wait completed. Final screenshot captured for iteration ${i}.`);
              } // End loop
              console.log("Extra watch time started.");
              await new Promise(resolve => setTimeout(resolve, 21600000)); 
              
            } catch (error) {
              console.error("An error occurred during the process:", error.message);
              console.error("Full error stack:", error.stack); // Log the full stack trace
              try {
                // Attempt to save state even on error
                if (page && !page.isClosed()) {
                    const errorHtml = await page.content();
                    fs.writeFileSync(path.join(screenshotsDir, "error_page.html"), errorHtml);
                    await page.screenshot({ path: path.join(screenshotsDir, "error.png"), fullPage: true });
                    console.error("[DEBUG] Saved error HTML to error_page.html.");
                } else {
                   console.error("[DEBUG] Page was closed or unavailable, cannot save error HTML/screenshot.");
                }
              } catch (saveError) {
                 console.error("[DEBUG] Could not save error state:", saveError.message);
              }
              // Re-throw the error to ensure the script exits with a non-zero code
              throw error; 
            } finally {
               if (browser) {
                  console.log("Closing browser...");
                  await browser.close();
                  console.log("Browser closed.");
               } else {
                  console.log("Browser variable not defined or already closed.");
               }
            }
          })();
          EOL

      # MODIFIED STEP: Run script with retry logic
      - name: Run YTMonster Login and Launch Script with Retry
        id: run_script
        run: |
          MAX_RETRIES=3 # Max attempts (1 initial + 2 retries)
          RETRY_COUNT=0
          SUCCESS=false
          # The specific error message string to check for
          SPECIFIC_ERROR_MSG="Cannot take screenshot with 0 width"

          # Clear previous log if it exists, to avoid false positives on retry
          rm -f script_output.log

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "--- Starting Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES ---"

            # Run the script. Redirect stderr to stdout (2>&1) so both are captured by tee.
            # Pipe to tee to save to file AND show on console.
            node scripts/ytmonster-login.js 2>&1 | tee script_output.log
            EXIT_CODE=${PIPESTATUS[0]} # Capture the exit code of the node command, not tee

            if [ $EXIT_CODE -eq 0 ]; then
              echo "--- Script completed successfully on attempt $((RETRY_COUNT + 1)) ---"
              SUCCESS=true
              break # Exit the loop on success
            fi

            # Script failed, check the reason
            echo "--- Script failed on attempt $((RETRY_COUNT + 1)) with exit code $EXIT_CODE ---"
            # Check if the specific error message exists in the log file
            # Using grep -Fq for fixed string matching and quiet output
            if grep -Fq "$SPECIFIC_ERROR_MSG" script_output.log; then
              echo "Detected specific screenshot error: '$SPECIFIC_ERROR_MSG'."
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                 echo "Retrying after a delay..."
                 # Optional: Add a delay before retrying
                 sleep 30 # Wait 30 seconds before next attempt
                 # Clear screenshots from failed attempt to avoid confusion? Or keep them? Keeping for now.
                 # rm -rf screenshots/*
                 # Clear the log for the next attempt
                 rm -f script_output.log
              else
                 echo "Maximum retry limit ($MAX_RETRIES) reached for the specific error."
              fi
            else
              echo "Script failed with an unspecified error (or error message not found in log)."
              echo "Not retrying this error."
              break # Exit loop on unspecified error
            fi
          done

          # After the loop, check if it succeeded or failed definitively
          if [ "$SUCCESS" = false ]; then
            echo "*** Workflow Step Failed: Script did not complete successfully after all attempts. ***"
            # Ensure the workflow step is marked as failed
            exit 1
          fi

      - name: Upload Debug Artifacts
        if: always() # Always run this to upload logs/screenshots regardless of success/failure
        uses: actions/upload-artifact@v4
        with:
          name: ytmonster-debug-artifacts-${{ github.run_id }}-${{ github.run_attempt }} # Add run ID and attempt for uniqueness
          path: |
            screenshots/
            script_output.log
            # Include any error HTML saved by the script
            screenshots/error_page.html
            screenshots/error.png
          retention-days: 7 # Optional: Keep artifacts for 7 days
